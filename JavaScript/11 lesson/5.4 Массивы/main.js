'use strict'


///////////////////////////////////ЗАДАЧА 1

//Что выведет следующий код?

let fruits = ["Яблоки", "Груша", "Апельсин"];

// добавляем новое значение в "копию"
let shoppingCart = fruits;
shoppingCart.push("Банан");

// что в fruits?
alert( fruits.length ); // ?

//в массив в конец добавится 'банан' и станет длина 4, для fruits тоже сработает,
//т.к. fruits & shoppingCart ссылаются на один и тот же массив


///////////////////////////////////ЗАДАЧА 2

// Давайте произведём 5 операций с массивом.

// Создайте массив styles с элементами «Джаз» и «Блюз».
const styles = ['Джаз', 'Блюз'];

// Добавьте «Рок-н-ролл» в конец.
styles.push('Рок-н-ролл');

// Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать 
//для массивов с любой длиной.
styles[Math.floor(styles.length/2)] = 'Классика';
// Удалите первый элемент массива и покажите его.
styles.shift(styles[0]);
// Вставьте «Рэп» и «Регги» в начало массива.
styles.unshift('Рэп', 'Рэгги')

// Массив по ходу выполнения операций:

// Джаз, Блюз
// Джаз, Блюз, Рок-н-ролл
// Джаз, Классика, Рок-н-ролл
// Классика, Рок-н-ролл
// Рэп, Регги, Классика, Рок-н-ролл 

/////////////////////////////////////////////ЗАДАЧА 3
// Каков результат? Почему?

let arr = ["a", "b"];

arr.push(function() {
  alert( this );
})

arr[2](); // это вызов функции, она встанет на [2]. она вызовется пушто скобочки () и выведет саму себя в алерт 

///////////////////////////////////////////////ЗАДАЧА 4
// Напишите функцию sumInput(), которая:

// Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
// Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
// Подсчитывает и возвращает сумму элементов массива.
// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».

function sumInput() {
    const arr = [];
    let num;
    let result = 0;

    do {
      num = prompt('Введите число');
      if (isNaN(num) == true || num == null) {
        break
      } else {
        arr.push(+num);
      }
      
    } while(isNaN(num) == false && num != null)
    
    for (let i = 0; i < arr.length; i++) {
      result += arr[i];
    }
    
    alert(result)

}
//вроде все правильно работаит

////////////////////////////////////////////////////// ЗАДАЧА 5
// На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].

// Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.

// Функция getMaxSubSum(arr) должна возвращать эту сумму.

// Например:

getMaxSubSum([-1, 2, 3, -9]) = 5 
getMaxSubSum([2, -1, 2, 3, -9]) = 6
getMaxSubSum([-1, 2, 3, -9, 11]) = 11
getMaxSubSum([-2, -1, 1, 2]) = 3
getMaxSubSum([100, -9, 2, -3, 5]) = 100
getMaxSubSum([1, 2, 3]) = 6 //(берём все)
// Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:

getMaxSubSum([-1, -2, -3]) = 0
// Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций.

function getMaxSubSum(array) {
  
}
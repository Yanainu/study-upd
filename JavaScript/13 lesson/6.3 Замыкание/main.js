'use strict'

//-----------------------------------------------------------------------------------------ЗАДАЧА 1
// Здесь мы делаем два счётчика: counter и counter2, используя одну и ту же функцию makeCounter.

// Они независимы? Что покажет второй счётчик? 0,1 или 2,3 или что-то ещё?

function makeCounter() {
  let count = 0;

  return function() {
    return count++;
  };
}

let counter = makeCounter();
let counter2 = makeCounter();

alert( counter() ); // 0
alert( counter() ); // 1

alert( counter2() ); // ?//ящитаю они независимы и тут тоже будет сперва 0 потом 1 итд
alert( counter2() ); // ?//тут 1 
//только мне сложно объяснить это словами, это как-то интуитивно понятно
//типа... мы когда вызываем counter2 мы обращаемся какбы с нуля, заново к этой функции, без учета counter(), поэтому снова начнется с 0


//-----------------------------------------------------------------------------------------ЗАДАЧА 2

// Здесь объект счётчика создан с помощью функции-конструктора.

// Будет ли он работать? Что покажет?

function Counter() {
  let count = 0;

  this.up = function() {
    return ++count;
  };
  this.down = function() {
    return --count;
  };
}

let counter = new Counter();

alert( counter.up() ); // ? //покажет 1
alert( counter.up() ); // ? //покажет 2
alert( counter.down() ); // ? //покажет 1
//угадала. ну все логично же, последовательно работает, вызывается одно и то же, на языке главы "одно лексическое окружение"


//-----------------------------------------------------------------------------------------ЗАДАЧА 3

// Посмотрите на код. Какой будет результат у вызова на последней строке?

let phrase = "Hello";

if (true) {
  let user = "John";

  function sayHi() {
    alert(`${phrase}, ${user}`);
  }
}

sayHi();//без use strict будет Hi John, с use strict будет ошибка т.к. функция sayHi в закрытом блоке, ее не должно быть видно в глобальной области

//-----------------------------------------------------------------------------------------ЗАДАЧА 4

// Сумма с помощью замыканий
// важность: 4
// Напишите функцию sum, которая работает таким образом: sum(a)(b) = a+b.

// Да, именно таким образом, используя двойные круглые скобки (не опечатка).

// Например:

sum(1)(2) = 3
sum(5)(-1) = 4

//решение
// sum (a) это имя функции, и (b) аргумент этой функции
function sum(b) {// а это ...(b)
  return function (a) { //вот это какбы 'sum(a)' 
    return a + b;
  }
}

//-----------------------------------------------------------------------------------------ЗАДАЧА 5

// У нас есть встроенный метод arr.filter(f) для массивов. Он фильтрует все элементы с помощью функции f.
// Если она возвращает true, то элемент добавится в возвращаемый массив.

// Сделайте набор «готовых к употреблению» фильтров:

inBetween(a, b) //– между a и b (включительно).
//inArray([...]) //– находится в данном массиве.
// Они должны использоваться таким образом:

arr.filter(inBetween(3,6)) //– выбирает только значения между 3 и 6 (включительно).
arr.filter(inArray([1,2,3])) //– выбирает только элементы, совпадающие с одним из элементов массива

let arr = [1, 2, 3, 4, 5, 6, 7];

alert( arr.filter(inBetween(3, 6)) ); // 3,4,5,6

alert( arr.filter(inArray([1, 2, 10])) ); // 1,2

//РЕШЕНИЕ
//inBetwenn
function inBetween(a, b) {
  return function(x) {
    return x >= a && x <= b;
  }
}
//inArray
function inArray(array) {
  return function(x) {
    if (array.includes(x)) {
      return x;
    }
  }
}

//-----------------------------------------------------------------------------------------ЗАДАЧА 6

// У нас есть массив объектов, который нужно отсортировать:

let users = [
  { name: "John", age: 20, surname: "Johnson" },
  { name: "Pete", age: 18, surname: "Peterson" },
  { name: "Ann", age: 19, surname: "Hathaway" }
];
// Обычный способ был бы таким:

// по имени (Ann, John, Pete)
users.sort((a, b) => a.name > b.name ? 1 : -1);

// по возрасту (Pete, Ann, John)
users.sort((a, b) => a.age > b.age ? 1 : -1);
// Можем ли мы сделать его короче, скажем, вот таким?

users.sort(byField('name'));
users.sort(byField('age'));

//РЕШЕНИЕ
function byField(field) {
  return (a, b) => a[field] - b[field];
}

//-----------------------------------------------------------------------------------------ЗАДАЧА 7

// Следующий код создаёт массив из стрелков (shooters).

// Каждая функция предназначена выводить их порядковые номера. Но что-то пошло не так…

function makeArmy() {
  let shooters = [];

  let i = 0;
  while (i < 10) {
    let shooter = function() { // функция shooter
      alert( i ); // должна выводить порядковый номер
    };
    shooters.push(shooter);
    i++;
  }

  return shooters;
}

let army = makeArmy();

army[0](); // у 0-го стрелка будет номер 10
army[5](); // и у 5-го стрелка тоже будет номер 10
// ... у всех стрелков будет номер 10, вместо 0, 1, 2, 3...

//решение 
function makeArmy() {
  let shooters = [];

  let i = 0;
  while (i < 10) {
    let j = i;//тогда при каждой итерации будет разный j и алертиться будет j 
    let shooter = function() { // функция shooter
      alert( j ); // должна выводить порядковый номер
    };
    shooters.push(shooter);
    i++;
  }

  return shooters;
}

let army = makeArmy();

army[0](); // у 0-го стрелка будет номер 10
army[5]();
'use strict'

//-----------------------------------------------------------------------------------------------ЗАДАЧА 1 

// Создайте декоратор spy(func), который должен возвращать обёртку, которая сохраняет все вызовы функции в своём свойстве calls.

// Каждый вызов должен сохраняться как массив аргументов.

// Например:

function work(a, b) {
  alert( a + b ); // произвольная функция или метод
}

work = spy(work);

work(1, 2); // 3
work(4, 5); // 9

for (let args of work.calls) {
  alert( 'call:' + args.join() ); // "call:1,2", "call:4,5"
}

//РЕШЕНИЕ

function work(a, b) {
  alert( a + b ); // произвольная функция или метод
}

let argsArray = [];//если я массив для хранения аргументов задам в функции то потом я его не вызову

function spy(func) {
  return function(...args) {
    //надо аргументы сложить в массив...
    argsArray.push(args);
    //и сделать вызов функции с результатом
    return func(...args);
  }
}
work = spy(work);

work(1, 2);
work(4, 5);

for (let args of argsArray) {
  alert( 'call:' + args.join() ); // "call:1,2", "call:4,5"
}

//ЭТО РАБОЧЕЕ ,НО  НЕДОСТАТОЧНОЕ РЕШЕНИЕ я не понимаю полглавы просто
//не понимаю как сделать чтобы было именно work.calls 





//-----------------------------------------------------------------------------------------------ЗАДАЧА 2

// Создайте декоратор delay(f, ms), который задерживает каждый вызов f на ms миллисекунд. Например:

function f(x) {
  alert(x);
}

// создаём обёртки
let f1000 = delay(f, 1000);
let f1500 = delay(f, 1500);

f1000("test"); // показывает "test" после 1000 мс
f1500("test"); // показывает "test" после 1500 мс
// Другими словами, delay(f, ms) возвращает вариант f с «задержкой на ms мс».

// В приведённом выше коде f – функция с одним аргументом, но ваше решение должно передавать все аргументы и контекст this.

//решение

function delay(func, time) {
  return function(x) {
    setTimeout(() => {
      return func(x)
    }, time);
  }
}
//вроде все работает...

//-----------------------------------------------------------------------------------------------ЗАДАЧА 3

// Результатом декоратора debounce(f, ms) должна быть обёртка, которая передаёт вызов f не более одного раза в ms миллисекунд. 
// Другими словами, когда мы вызываем debounce, это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.

// Например:

let f = debounce(alert, 1000);

f(1); // выполняется немедленно
f(2); // проигнорирован

setTimeout( () => f(3), 100); // проигнорирован (прошло только 100 мс)
setTimeout( () => f(4), 1100); // выполняется
setTimeout( () => f(5), 1500); // проигнорирован (прошло только 400 мс от последнего вызова)

function debounce(func, time) {
  //код с проверкой условия вызова
  let callThisTime = new Date();//время нынешнего вызова функции
  console.log(`callThisTime = ${callThisTime}`)
  let callLastTime; //время прошлого вызова функции
  let difference = callThisTime - callLastTime;
  console.log(`difference = ${difference}`)

    console.log(`callastTime = ${callLastTime} `)
    if (difference < time) {//если промежуток меньше чем заявленный time-отменяем вызов
      clearTimeout(timerId);
      console.log(`РАНО!`);
    } 
  
    //вызов через нулевой settimeout, чтобы это происходило после выполнения условия выше и я могла его отменить 
    let timerId = setTimeout(() => {
      callLastTime = new Date()//это время этого вызова, которое для следующего вызова будет временем прошлого вызова
      console.log(`callLastTime = ${callLastTime}`)
      return func();
    }, 0);//settimeout с нулем - функция вызовется только после выполнения предыдущего кода, где условие
}


//-----------------------------------------------------------------------------------------------ЗАДАЧА 4

// Тормозящий (throttling) декоратор

// Создайте «тормозящий» декоратор throttle(f, ms), который возвращает обёртку, передавая вызов в f не более одного раза в ms миллисекунд. 
// Те вызовы, которые попадают в период «торможения», игнорируются.
// Отличие от debounce – если проигнорированный вызов является последним во время «задержки», то он выполняется в конце.

// Пример кода:

function f(a) {
  console.log(a)
}

// f1000 передаёт вызовы f максимум раз в 1000 мс
let f1000 = throttle(f, 1000);

f1000(1); // показывает 1
f1000(2); // (ограничение, 1000 мс ещё нет)
f1000(3); // (ограничение, 1000 мс ещё нет)

// когда 1000 мс истекли ...
// ...выводим 3, промежуточное значение 2 было проигнорировано
// P.S. Аргументы и контекст this, переданные в f1000, должны быть переданы в оригинальную f.

//решение



function throttle(func, time) {
  //код с проверкой условия вызова
  let callThisTime = new Date();//время нынешнего вызова функции
  console.log(`callThisTime = ${callThisTime}`)
  let callLastTime; //время прошлого вызова функции
  let difference = callThisTime - callLastTime;
  console.log(`difference = ${difference}`)

    console.log(`callastTime = ${callLastTime} `)
    if (difference < time) {//если промежуток меньше чем заявленный time-отменяем вызов
      clearTimeout(timerId);
      console.log(`РАНО!`);
    } 
  
    //вызов через нулевой settimeout, чтобы это происходило после выполнения условия выше и я могла его отменить 
    let timerId = setTimeout(() => {
      callLastTime = new Date()//это время этого вызова, которое для следующего вызова будет временем прошлого вызова
      console.log(`callLastTime = ${callLastTime}`)
      return func();
    }, 0);//settimeout с нулем - функция вызовется только после выполнения предыдущего кода, где условие
}
